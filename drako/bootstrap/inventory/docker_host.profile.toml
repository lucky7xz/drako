# drako Profile: Docker Host Administration
# A comprehensive toolkit for setting up, managing, and backing up a Docker host.

# ┌─ Grid Dimensions ──────────────────────────────┐
x = 2
y = 3
# └────────────────────────────────────────────────┘

# ┌─ Setup & Dependencies (A,0) ───────────────────┐
[[commands]]
name = "⚙️ Setup"
col = "A"
row = 0
items = [
    { 
      name = "Install Docker Engine", 
      description = "Detects OS (Debian/RHEL/Arch) and installs the Docker engine and Compose plugin.",
      command = """\
#!/bin/sh
# Universal Docker Installer for Debian, RHEL, and Arch based systems

# Function to print messages
echo_info() {
    printf "\n[INFO] %s\n" "$1"
}

# Add user to docker group post-install
post_install() {
    echo_info "Adding current user ($USER) to the 'docker' group..."
    sudo usermod -aG docker $USER
    echo_info "Installation complete. You may need to log out and log back in for group changes to take effect."
    echo_info "Starting and enabling the Docker service..."
    sudo systemctl enable docker
    sudo systemctl start docker
}

# Check for package managers
if command -v apt-get >/dev/null 2>&1; then
    # --- DEBIAN/UBUNTU ---
    echo_info "Debian/Ubuntu based system detected. Using apt-get."
    sudo apt-get update
    sudo apt-get install -y ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    post_install

elif command -v dnf >/dev/null 2>&1; then
    # --- RHEL/ROCKY/CENTOS ---
    echo_info "RHEL based system detected. Using dnf."
    sudo dnf -y install dnf-utils
    sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    post_install

elif command -v pacman >/dev/null 2>&1; then
    # --- ARCH LINUX ---
    echo_info "Arch Linux based system detected. Using pacman."
    sudo pacman -Syu --noconfirm
    sudo pacman -S --noconfirm docker docker-compose
    post_install

else
    echo "[ERROR] Could not find a supported package manager (apt, dnf, pacman). Aborting." >&2
    exit 1
fi
      "
    },
    {
      name = "Install Lazydocker",
      description = "Installs the Lazydocker TUI for convenient Docker management.",
      command = "curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash"
    }
]

# ┌─ Engine & System (B,0) ────────────────────────┐
[[commands]]
name = "🚀 Engine & System"
col = "B"
row = 0
items = [
    { name = "✅ Engine Status", description = "Check if the Docker daemon is running.", command = "sudo systemctl status docker" },
    { name = "▶️ Start Engine", description = "Start the Docker daemon.", command = "sudo systemctl start docker" },
    { name = "⏹️ Stop Engine", description = "Stop the Docker daemon.", command = "sudo systemctl stop docker" },
    { name = "🔄 Restart Engine", description = "Restart the Docker daemon.", command = "sudo systemctl restart docker" },
    { name = "🔌 Enable on Boot", description = "Ensure Docker starts automatically on system boot.", command = "sudo systemctl enable docker" },
    { name = "🧹 System Prune", description = "Remove all unused containers, networks, images (both dangling and unreferenced).", command = "sudo docker system prune -af" }
]

# ┌─ Core Resources (A,1) ─────────────────────────┐
[[commands]]
name = "📦 Resources"
col = "A"
row = 1
items = [
    { name = "🚢 List Running Containers", description = "Show all currently running containers.", command = "sudo docker ps" },
    { name = "📋 List All Containers", description = "Show all containers, including stopped ones.", command = "sudo docker ps -a" },
    { name = "📊 Live Stats", description = "Stream live performance stats for all running containers.", command = "sudo docker stats" },
    { name = "🖼️ List Images", description = "Show all Docker images stored locally.", command = "sudo docker images" },
    { name = "🌐 List Networks", description = "Show all Docker networks.", command = "sudo docker network ls" }
]

# ┌─ Operations & Compose (B,1) ───────────────────┐
[[commands]]
name = "🛠️ Operations"
col = "B"
row = 1
items = [
    { name = "🤿 Go Inside Container", description = "Get a shell inside a running container.", command = "read -p 'Enter container name/ID: ' container && sudo docker exec -it $container /bin/sh" },
    { name = "📜 Follow Logs", description = "Stream the logs of a running container.", command = "read -p 'Enter container name/ID: ' container && sudo docker logs -f $container" },
    { name = "⬆️ Compose Up", description = "Start services from a Compose file in detached mode.", command = "read -p 'Enter path to compose file [./docker-compose.yml]: ' cpath && sudo docker compose -f ${cpath:-./docker-compose.yml} up -d" },
    { name = "⬇️ Compose Down", description = "Stop and remove containers, networks defined in a Compose file.", command = "read -p 'Enter path to compose file [./docker-compose.yml]: ' cpath && sudo docker compose -f ${cpath:-./docker-compose.yml} down" }
]

# ┌─ Volumes & Backups (A,2) ──────────────────────┐
[[commands]]
name = "💾 Volumes & Backups"
col = "A"
row = 2
items = [
    { name = "📚 List Volumes", description = "Show all persistent data volumes.", command = "sudo docker volume ls" },
    { name = "🗑️ Prune Unused Volumes", description = "Remove all volumes not attached to at least one container.", command = "sudo docker volume prune -f" },
    { 
      name = "📤 Backup a Volume", 
      description = "Create a compressed .tar.gz backup of a volume.",
      command = """\
read -p 'Enter volume name to backup: ' vol_name && \
read -p 'Enter backup destination path (e.g., /mnt/nas/backups): ' backup_path && \
fname=\"backup_${vol_name}_$(date +%Y-%m-%d_%H-%M-%S).tar.gz\" && \
sudo docker run --rm -v "${vol_name}:/data" -v "${backup_path}:/backup" alpine \
tar -czf "/backup/${fname}" -C /data . && \
echo \"Backup created at ${backup_path}/${fname}\" 
      """
    },
    {
      name = "📥 Restore a Volume",
      description = "Restore a .tar.gz backup to a new or existing volume.",
      command = """\
read -p 'Enter full path to backup file: ' backup_file && \
read -p 'Enter volume name to restore to (will be created if not exists): ' vol_name && \
sudo docker run --rm -v "${vol_name}:/data" -v \"$(dirname ${backup_file}):/backup\" alpine \
tar -xzf "/backup/$(basename ${backup_file})" -C /data && \
echo \"Restore of ${backup_file} to volume ${vol_name} complete.\" 
      """
    }
]
