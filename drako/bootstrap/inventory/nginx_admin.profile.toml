# drako Profile: Nginx Administration
# A toolkit for installing, managing, and monitoring the Nginx web server.

# ┌─ Grid Dimensions ──────────────────────────────┐
x = 2
y = 2
# └────────────────────────────────────────────────┘

# ┌─ Setup & Config (A,0) ─────────────────────────┐
[[commands]]
name = "⚙️ Setup & Config"
col = "A"
row = 0

[[commands.items]]
name = "Install Nginx"
description = "Detects OS (Debian/RHEL/Arch) and installs the Nginx server."
auto_close_execution = false
command = """
#!/bin/sh
# Universal Nginx Installer

echo_info() {
    printf '\n[INFO] %s\n' "$1"
}

post_install() {
    echo_info "Installation complete."
    echo_info "Starting and enabling the Nginx service..."
    sudo systemctl enable --now nginx
}

if command -v apt-get >/dev/null 2>&1; then
    echo_info "Debian/Ubuntu detected. Using apt-get."
    sudo apt-get update
    sudo apt-get install -y nginx
    post_install
elif command -v dnf >/dev/null 2>&1; then
    echo_info "RHEL/Rocky detected. Using dnf."
    sudo dnf install -y nginx
    post_install
elif command -v pacman >/dev/null 2>&1; then
    echo_info "Arch Linux detected. Using pacman."
    sudo pacman -Syu --noconfirm
    sudo pacman -S --noconfirm nginx
    post_install
else
    printf '\n[ERROR] Could not find a supported package manager. Aborting.\n' >&2
    exit 1
fi
"""

[[commands.items]]
name = "✅ Test Config"
description = "Validate the Nginx configuration for syntax errors."
command = "sudo nginx -t"
auto_close_execution = false

[[commands.items]]
name = "📜 View Main Config"
description = "Display the main nginx.conf file."
command = "cat /etc/nginx/nginx.conf"
auto_close_execution = false

[[commands.items]]
name = "📁 List Enabled Sites"
description = "List all currently enabled site configurations."
command = "ls -l /etc/nginx/sites-enabled/"
auto_close_execution = false

# ┌─ Service Management (B,0) ─────────────────────┐
[[commands]]
name = "🚀 Service Management"
col = "B"
row = 0

[[commands.items]]
name = "▶️ Start"
command = "sudo systemctl start nginx"
auto_close_execution = false

[[commands.items]]
name = "⏹️ Stop"
command = "sudo systemctl stop nginx"
auto_close_execution = false

[[commands.items]]
name = "🔄 Restart"
command = "sudo systemctl restart nginx"
auto_close_execution = false

[[commands.items]]
name = "⚡ Reload"
description = "Gracefully reload config without dropping connections."
command = "sudo systemctl reload nginx"
auto_close_execution = false

[[commands.items]]
name = "🔌 Enable on Boot"
command = "sudo systemctl enable nginx"
auto_close_execution = false

[[commands.items]]
name = "📊 Status"
command = "sudo systemctl status nginx"
auto_close_execution = false

# ┌─ Site Management (A,1) ────────────────────────┐
[[commands]]
name = "🌐 Site Management"
col = "A"
row = 1

[[commands.items]]
name = "Enable Site"
description = "Enable a site by creating a symlink (Debian/Ubuntu style)."
command = "printf 'Enter config file name from sites-available: '; read -r site && sudo ln -s /etc/nginx/sites-available/\"$site\" /etc/nginx/sites-enabled/\"$site\" && echo 'Site enabled. Reload Nginx to apply.'"
auto_close_execution = false

[[commands.items]]
name = "Disable Site"
description = "Disable a site by removing its symlink."
command = "printf 'Enter config file name from sites-enabled: '; read -r site && sudo rm /etc/nginx/sites-enabled/\"$site\" && echo 'Site disabled. Reload Nginx to apply.'"
auto_close_execution = false

# ┌─ Logs (B,1) ───────────────────────────────────┐
[[commands]]
name = "📜 Logs"
col = "B"
row = 1

[[commands.items]]
name = "Follow Access Log"
command = "sudo tail -f /var/log/nginx/access.log"

[[commands.items]]
name = "Follow Error Log"
command = "sudo tail -f /var/log/nginx/error.log"